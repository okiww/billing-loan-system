// Code generated by MockGen. DO NOT EDIT.
// Source: internal/loan/repositories/loan_repository.go

// Package loan_mock is a generated GoMock package.
package loan_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	models "github.com/okiww/billing-loan-system/internal/loan/models"
)

// MockLoanRepositoryInterface is a mock of LoanRepositoryInterface interface.
type MockLoanRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryInterfaceMockRecorder
}

// MockLoanRepositoryInterfaceMockRecorder is the mock recorder for MockLoanRepositoryInterface.
type MockLoanRepositoryInterfaceMockRecorder struct {
	mock *MockLoanRepositoryInterface
}

// NewMockLoanRepositoryInterface creates a new mock instance.
func NewMockLoanRepositoryInterface(ctrl *gomock.Controller) *MockLoanRepositoryInterface {
	mock := &MockLoanRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepositoryInterface) EXPECT() *MockLoanRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanRepositoryInterface) CreateLoan(ctx context.Context, loan *models.LoanModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, loan)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanRepositoryInterfaceMockRecorder) CreateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).CreateLoan), ctx, loan)
}

// FetchActiveLoan mocks base method.
func (m *MockLoanRepositoryInterface) FetchActiveLoan(ctx context.Context) ([]models.LoanModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchActiveLoan", ctx)
	ret0, _ := ret[0].([]models.LoanModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchActiveLoan indicates an expected call of FetchActiveLoan.
func (mr *MockLoanRepositoryInterfaceMockRecorder) FetchActiveLoan(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchActiveLoan", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).FetchActiveLoan), ctx)
}

// GetLoanByID mocks base method.
func (m *MockLoanRepositoryInterface) GetLoanByID(ctx context.Context, id int64) (*models.LoanModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, id)
	ret0, _ := ret[0].(*models.LoanModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanRepositoryInterfaceMockRecorder) GetLoanByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).GetLoanByID), ctx, id)
}

// GetLoanByUserID mocks base method.
func (m *MockLoanRepositoryInterface) GetLoanByUserID(ctx context.Context, userID int) ([]models.LoanModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.LoanModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByUserID indicates an expected call of GetLoanByUserID.
func (mr *MockLoanRepositoryInterfaceMockRecorder) GetLoanByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByUserID", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).GetLoanByUserID), ctx, userID)
}

// UpdateBilledLoanBillToPaid mocks base method.
func (m *MockLoanRepositoryInterface) UpdateBilledLoanBillToPaid(ctx context.Context, tx *sqlx.Tx, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBilledLoanBillToPaid", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBilledLoanBillToPaid indicates an expected call of UpdateBilledLoanBillToPaid.
func (mr *MockLoanRepositoryInterfaceMockRecorder) UpdateBilledLoanBillToPaid(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBilledLoanBillToPaid", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).UpdateBilledLoanBillToPaid), ctx, tx, id)
}

// UpdateLoanAndLoanBillsInTx mocks base method.
func (m *MockLoanRepositoryInterface) UpdateLoanAndLoanBillsInTx(ctx context.Context, loanID, loanBillID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanAndLoanBillsInTx", ctx, loanID, loanBillID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoanAndLoanBillsInTx indicates an expected call of UpdateLoanAndLoanBillsInTx.
func (mr *MockLoanRepositoryInterfaceMockRecorder) UpdateLoanAndLoanBillsInTx(ctx, loanID, loanBillID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanAndLoanBillsInTx", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).UpdateLoanAndLoanBillsInTx), ctx, loanID, loanBillID, amount)
}

// UpdateOutStandingAmountAndStatus mocks base method.
func (m *MockLoanRepositoryInterface) UpdateOutStandingAmountAndStatus(ctx context.Context, tx *sqlx.Tx, id, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutStandingAmountAndStatus", ctx, tx, id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutStandingAmountAndStatus indicates an expected call of UpdateOutStandingAmountAndStatus.
func (mr *MockLoanRepositoryInterfaceMockRecorder) UpdateOutStandingAmountAndStatus(ctx, tx, id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutStandingAmountAndStatus", reflect.TypeOf((*MockLoanRepositoryInterface)(nil).UpdateOutStandingAmountAndStatus), ctx, tx, id, amount)
}
