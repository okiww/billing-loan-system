// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/services/user_service.go

// Package user_mock is a generated GoMock package.
package user_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// IsDelinquent mocks base method.
func (m *MockUserServiceInterface) IsDelinquent(ctx context.Context, userID int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelinquent", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelinquent indicates an expected call of IsDelinquent.
func (mr *MockUserServiceInterfaceMockRecorder) IsDelinquent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelinquent", reflect.TypeOf((*MockUserServiceInterface)(nil).IsDelinquent), ctx, userID)
}

// UpdateUserToDelinquent mocks base method.
func (m *MockUserServiceInterface) UpdateUserToDelinquent(ctx context.Context, userID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserToDelinquent", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserToDelinquent indicates an expected call of UpdateUserToDelinquent.
func (mr *MockUserServiceInterfaceMockRecorder) UpdateUserToDelinquent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserToDelinquent", reflect.TypeOf((*MockUserServiceInterface)(nil).UpdateUserToDelinquent), ctx, userID)
}

// UpdateUserToNotDelinquent mocks base method.
func (m *MockUserServiceInterface) UpdateUserToNotDelinquent(ctx context.Context, userID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserToNotDelinquent", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserToNotDelinquent indicates an expected call of UpdateUserToNotDelinquent.
func (mr *MockUserServiceInterfaceMockRecorder) UpdateUserToNotDelinquent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserToNotDelinquent", reflect.TypeOf((*MockUserServiceInterface)(nil).UpdateUserToNotDelinquent), ctx, userID)
}
